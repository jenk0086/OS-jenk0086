// XMega65 Kernal Development Template
// Each function of the kernal is a no-args function
// The functions are placed in the SYSCALLS table surrounded by JMP and NOP

import "string"

// Use a linker definition file (put the previous listing into that file)
#pragma link("mega65hyper.ld")
// Some definitions of addresses and special values that this program uses
const char* RASTER = 0xd012;
const char* VIC_MEMORY = 0xd018;
const char* SCREEN = 0x0400;
const char* BGCOL = 0xd021;
const char* COLS = 0xd800;
const char BLACK = 0;
const char WHITE = 2;

// Some text to display
char[] MESSAGE = "checkpoint 2.3 by jenk0086";

void main() {
}

void reset() {
	// Initialize screen memory, and select correct font
	*VIC_MEMORY = 0x14;
	// Fill the screen with spaces
	memset(SCREEN, ' ',40*25);
	// Set the colour of every character on the screen to white
	memset(COLS, WHITE, 40*25);
	// Print the "Checkpoint 2.2 by jenk0086" message
	char* sc = SCREEN+40; // Display it one line down on the screen
	char* msg = MESSAGE;  // The message to display
	//A simple copy routine to copy the string
	while(*msg) {
		*sc++ = *msg++;
	}
	// Loop forever showing two white lines as raster bars
	while(true) {
		if(*RASTER==54 || *RASTER==66) {
			*BGCOL = WHITE;
		} else {
			*BGCOL = BLACK;
		}
	}
}

void exit_hypervisor()
{
	*(unsigned char *)$D67F = $01;	
}

// Here are a couple of sample SYSCALL handlers that just display a character on the screen
void syscall00() {

	void exit_hypervisor();

}

void syscall01() {

	void exit_hypervisor();

}

void syscall02() {

	void exit_hypervisor();

}

void syscall03() {

	void exit_hypervisor();

}

void syscall04() {

	void exit_hypervisor();

}

void syscall05() {

	void exit_hypervisor();

}

void syscall06() {

	void exit_hypervisor();

}

void syscall07() {

	void exit_hypervisor();

}

void syscall08() {

	void exit_hypervisor();

}

void syscall09() {

	void exit_hypervisor();

}

void syscall0A() {

	void exit_hypervisor();

}

void syscall0B() {

	void exit_hypervisor();

}

void syscall0C() {

	void exit_hypervisor();

}
void syscall0D() {

	void exit_hypervisor();
}
void syscall0E() {

	void exit_hypervisor();

}
void syscall0F() {

	void exit_hypervisor();

}
void syscall10() {

	void exit_hypervisor();

}
void securentr() {

	void exit_hypervisor();

}
void securexit() {

	void exit_hypervisor();

}
void syscall13() {

	void exit_hypervisor();

}
void syscall14() {

	void exit_hypervisor();

}
void syscall15() {

	void exit_hypervisor();

}
void syscall16() {

	void exit_hypervisor();

}
void syscall17() {

	void exit_hypervisor();

}
void syscall18() {

	void exit_hypervisor();

}
void syscall19() {

	void exit_hypervisor();

}
void syscall1A() {

	void exit_hypervisor();

}
void syscall1B() {

	void exit_hypervisor();

}
void syscall1C() {

	void exit_hypervisor();

}
void syscall1D() {

	void exit_hypervisor();

}
void syscall1E() {

	void exit_hypervisor();

}
void syscall1F() {

	void exit_hypervisor();

}
void syscall20() {

	void exit_hypervisor();

}
void syscall21() {

	void exit_hypervisor();

}
void syscall22() {

	void exit_hypervisor();

}
void syscall23() {

	void exit_hypervisor();

}
void syscall24() {

	void exit_hypervisor();

}
void syscall25() {

	void exit_hypervisor();

}
void syscall26() {

	void exit_hypervisor();

}
void syscall27() {

	void exit_hypervisor();

}
void syscall28() {

	void exit_hypervisor();

}
void syscall29() {

	void exit_hypervisor();

}
void syscall2A() {

	void exit_hypervisor();

}
void syscall2B() {

	void exit_hypervisor()

}
void syscall2C() {

	void exit_hypervisor();

}
void syscall2D() {

	void exit_hypervisor();

}
void syscall2E() {

	void exit_hypervisor();

}
void syscall2F() {

	void exit_hypervisor();

}
void syscall30() {

	void exit_hypervisor();

}
void syscall31() {

	void exit_hypervisor();

}
void syscall32() {

	void exit_hypervisor();

}
void syscall33() {

	void exit_hypervisor();

}
void syscall34() {

	void exit_hypervisor();

}
void syscall35() {

	void exit_hypervisor();

}
void syscall36() {

	void exit_hypervisor();

}
void syscall37() {

	void exit_hypervisor();

}
void syscall38() {

	void exit_hypervisor();

}
void syscall39() {

	void exit_hypervisor();

}
void syscall3A() {

	void exit_hypervisor();

}
void syscall3B() {

	void exit_hypervisor();

}
void syscall3C() {

	void exit_hypervisor();

}
void syscall3D() {

	void exit_hypervisor();

}
void syscall3E() {

	void exit_hypervisor();

}
void syscall3F() {

	void exit_hypervisor();

}

// Now we select the SYSCALL segment to hold the SYSCALL/trap entry point table.
#pragma data_seg(Syscall)

// The structure of each entry point is JMP <handler address> + NOP
// We have a char (xjmp) to hold the opcode for the JMP instruction,
// and then put the address of the SYSCALL/trap handler in the next
// two points as a pointer, and end with the NOP instruction opcode.
struct SysCall {
	char xjmp;	//Hold $4C, the JMP $nnnn opcode
	void()* syscall;//Holds handler address, will be the target of the JMP
	char xnop;	//Hold $EA, the NOP opcode
};

// To save writing 0x4C and 0xEA all the time, we define them as constants.
const char JMP = 0x4c;
const char NOP = 0xea;

// Now we can have a nice table of up to 64 SYSCALL handlers expressed
// in a fairly readable and easy format.
// Each line is an instance of the struct SysCall from above, with the JMP
// opcode value, the address of the handler routine and the NOP opcode value.
export struct SysCall[] SYSCALLS = {
	{ JMP, &syscall00, NOP },
	{ JMP, &syscall01, NOP },
	{ JMP, &syscall02, NOP },
	{ JMP, &syscall03, NOP },
	{ JMP, &syscall04, NOP },
	{ JMP, &syscall05, NOP },
	{ JMP, &syscall06, NOP },
	{ JMP, &syscall07, NOP },
	{ JMP, &syscall08, NOP },
	{ JMP, &syscall09, NOP },
	{ JMP, &syscall0A, NOP },
	{ JMP, &syscall0B, NOP },
	{ JMP, &syscall0C, NOP },
	{ JMP, &syscall0D, NOP },
	{ JMP, &syscall0E, NOP },
	{ JMP, &syscall0F, NOP },
	{ JMP, &syscall10, NOP },
	{ JMP, &securentr, NOP },
	{ JMP, &securexit, NOP },
	{ JMP, &syscall13, NOP },
	{ JMP, &syscall14, NOP },
	{ JMP, &syscall15, NOP },
	{ JMP, &syscall16, NOP },
	{ JMP, &syscall17, NOP },
	{ JMP, &syscall18, NOP },
	{ JMP, &syscall19, NOP },
	{ JMP, &syscall1A, NOP },
	{ JMP, &syscall1B, NOP },
	{ JMP, &syscall1C, NOP },
	{ JMP, &syscall1D, NOP },
	{ JMP, &syscall1E, NOP },
	{ JMP, &syscall1F, NOP },
	{ JMP, &syscall20, NOP },
	{ JMP, &syscall21, NOP },
	{ JMP, &syscall22, NOP },
	{ JMP, &syscall23, NOP },
	{ JMP, &syscall24, NOP },
	{ JMP, &syscall25, NOP },
	{ JMP, &syscall26, NOP },
	{ JMP, &syscall27, NOP },
	{ JMP, &syscall28, NOP },
	{ JMP, &syscall29, NOP },
	{ JMP, &syscall2A, NOP },
	{ JMP, &syscall2B, NOP },
	{ JMP, &syscall2C, NOP },
	{ JMP, &syscall2D, NOP },
	{ JMP, &syscall2E, NOP },
	{ JMP, &syscall2F, NOP },
	{ JMP, &syscall30, NOP },
	{ JMP, &syscall31, NOP },
	{ JMP, &syscall32, NOP },
	{ JMP, &syscall33, NOP },
	{ JMP, &syscall34, NOP },
	{ JMP, &syscall35, NOP },
	{ JMP, &syscall36, NOP },
	{ JMP, &syscall37, NOP },
	{ JMP, &syscall38, NOP },
	{ JMP, &syscall39, NOP },
	{ JMP, &syscall3A, NOP },
	{ JMP, &syscall3B, NOP },
	{ JMP, &syscall3C, NOP },
	{ JMP, &syscall3D, NOP },
	{ JMP, &syscall3E, NOP },
	{ JMP, &syscall3F, NOP }
};

// In this example we had only two SYSCALLs defined, so rather than having
// another 62 lines, we can just ask KickC to make the TRAP table begin
// at the next multiple of $100, i.e., at $8100.
export align(0x100) struct SysCall[] SYSCALL_TRAP = {
	{ JMP, &reset, NOP },
	{ JMP, &reset, NOP },
	{ JMP, &reset, NOP },
	{ JMP, &reset, NOP },
	{ JMP, &reset, NOP },
	{ JMP, &reset, NOP },
	{ JMP, &reset, NOP },
	{ JMP, &reset, NOP },
	{ JMP, &reset, NOP },
	{ JMP, &reset, NOP },
	{ JMP, &reset, NOP },
	{ JMP, &reset, NOP },
	{ JMP, &reset, NOP },
	{ JMP, &reset, NOP },
	{ JMP, &reset, NOP },
	{ JMP, &reset, NOP },
	{ JMP, &reset, NOP },
	{ JMP, &reset, NOP },
	{ JMP, &reset, NOP },
	{ JMP, &reset, NOP },
	{ JMP, &reset, NOP },
	{ JMP, &reset, NOP },
	{ JMP, &reset, NOP },
	{ JMP, &reset, NOP },
	{ JMP, &reset, NOP },
	{ JMP, &reset, NOP },
	{ JMP, &reset, NOP },
	{ JMP, &reset, NOP },
	{ JMP, &reset, NOP },
	{ JMP, &reset, NOP },
	{ JMP, &reset, NOP },
	{ JMP, &reset, NOP },
	{ JMP, &reset, NOP },
	{ JMP, &reset, NOP },
	{ JMP, &reset, NOP },
	{ JMP, &reset, NOP },
	{ JMP, &reset, NOP },
	{ JMP, &reset, NOP },
	{ JMP, &reset, NOP },
	{ JMP, &reset, NOP },
	{ JMP, &reset, NOP },
	{ JMP, &reset, NOP },
	{ JMP, &reset, NOP },
	{ JMP, &reset, NOP },
	{ JMP, &reset, NOP },
	{ JMP, &reset, NOP },
	{ JMP, &reset, NOP },
	{ JMP, &reset, NOP },	
	{ JMP, &reset, NOP },
	{ JMP, &reset, NOP },
	{ JMP, &reset, NOP },
	{ JMP, &reset, NOP },
	{ JMP, &reset, NOP },
	{ JMP, &reset, NOP },
	{ JMP, &reset, NOP },
	{ JMP, &reset, NOP },
	{ JMP, &reset, NOP },
	{ JMP, &reset, NOP },
	{ JMP, &reset, NOP },
	{ JMP, &reset, NOP },
	{ JMP, &reset, NOP },
	{ JMP, &reset, NOP }
};