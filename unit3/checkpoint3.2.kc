// XMega65 Kernal Development Template
// Each function of the kernal is a no-args function
// The functions are placed in the SYSCALLS table surrounded by JMP and NOP

import "string"

// Use a linker definition file (put the previous listing into that file)
#pragma link("mega65hyper.ld")
// Some definitions of addresses and special values that this program uses
const char* RASTER = 0xd012;
const char* VIC_MEMORY = 0xd018;
const char* SCREEN = 0x0400;
const char* BGCOL = 0xd021;
const char* COLS = 0xd800;
const char BLACK = 0;
const char RED = 4;
unsigned char *current_screen_line = $0400;
unsigned char current_screen_x = 0;

// Some text to display
char[] MESSAGE = "jenk0086 operating system starting...";


void main(){
}

void test_memory()
{
  unsigned short mem_start = $0800;
  unsigned short mem_end = $7FFF;
  unsigned short i=mem_start;
  

  while (i<mem_end)
  {
    i++;
    unsigned char j;
    for (j=0;j<10;j++){
    }
  }
  print_hex(i);
}

void print_hex(unsigned short value)
{
  char[5] hex;
  unsigned char i;
  for(i=0;i<4;i++) {
    if (value<0xa000) hex[i]='0'+(char)(value>>12);
    else hex[i]=(char)(value>>12)-9;
    value<<=4;
  }
  hex[4]=0;
  print_to_screen(hex);
}

void print_to_screen(char *message){
  while (*message){
    char* screen_pos = current_screen_line + current_screen_x;
    *screen_pos = *message;  // Print the letter at the position pointed to
    current_screen_x++;      // Current screen item
    message++;               // Current letter in the message
  }
}


void print_newline(){
  current_screen_line = current_screen_line + 40; //Go to the next line
  current_screen_x = 0;                           // Start next line at beginning.
}

void reset() {
	// Initialize screen memory, and select correct font
	*VIC_MEMORY = 0x14;
	// Fill the screen with spaces
	memset(SCREEN, ' ',40*25);
	// Set the colour of every character on the screen to white
	memset(COLS, RED, 40*25);
	print_to_screen(MESSAGE);  //Print string in "Message"
	print_newline();           //go to the next line to begin printing
	print_to_screen("testing hardware");  //Print this text on the newline
	test_memory();
	print_to_screen("the value is $");
	print_hex(4546);
	print_newline();
	while(true) {
	
       	}
}

void exit_hypervisor()
{
	// Trigger exit from Hypervisor mode
	*(unsigned char *)$D67F = $01;	
}

// Here are a couple of sample SYSCALL handlers that just display a character on the screen

void syscall00() {

	exit_hypervisor();

}

void syscall01() {

	exit_hypervisor();

}

void syscall02() {

	exit_hypervisor();

}

void syscall03() {

	exit_hypervisor();

}

void syscall04() {

	exit_hypervisor();

}

void syscall05() {

	exit_hypervisor();

}

void syscall06() {

	exit_hypervisor();

}

void syscall07() {

	exit_hypervisor();

}

void syscall08() {

	exit_hypervisor();

}

void syscall09() {

	exit_hypervisor();

}

void syscall0A() {

	exit_hypervisor();

}

void syscall0B() {

	exit_hypervisor();

}

void syscall0C() {

	exit_hypervisor();

}
void syscall0D() {

	exit_hypervisor();
}
void syscall0E() {

	exit_hypervisor();

}
void syscall0F() {

	exit_hypervisor();

}
void syscall10() {

	exit_hypervisor();

}
void securentr() {

	exit_hypervisor();

}
void securexit() {

	exit_hypervisor();

}
void syscall13() {

	exit_hypervisor();

}
void syscall14() {

	exit_hypervisor();

}
void syscall15() {

	exit_hypervisor();

}
void syscall16() {

	exit_hypervisor();

}
void syscall17() {

	exit_hypervisor();

}
void syscall18() {

	exit_hypervisor();

}
void syscall19() {

	exit_hypervisor();

}
void syscall1A() {

	exit_hypervisor();

}
void syscall1B() {

	exit_hypervisor();

}
void syscall1C() {

	exit_hypervisor();

}
void syscall1D() {

	exit_hypervisor();

}
void syscall1E() {

	exit_hypervisor();

}
void syscall1F() {

	exit_hypervisor();

}
void syscall20() {

	exit_hypervisor();

}
void syscall21() {

	exit_hypervisor();

}
void syscall22() {

	exit_hypervisor();

}
void syscall23() {

	exit_hypervisor();

}
void syscall24() {

	exit_hypervisor();

}
void syscall25() {

	exit_hypervisor();

}
void syscall26() {

	exit_hypervisor();

}
void syscall27() {

	exit_hypervisor();

}
void syscall28() {

	exit_hypervisor();

}
void syscall29() {

	exit_hypervisor();

}
void syscall2A() {

	exit_hypervisor();

}
void syscall2B() {

	exit_hypervisor();

}
void syscall2C() {

	exit_hypervisor();

}
void syscall2D() {

	exit_hypervisor();

}
void syscall2E() {

	exit_hypervisor();

}
void syscall2F() {

	exit_hypervisor();

}
void syscall30() {

	exit_hypervisor();

}
void syscall31() {

	exit_hypervisor();

}
void syscall32() {

	exit_hypervisor();

}
void syscall33() {

	exit_hypervisor();

}
void syscall34() {

	exit_hypervisor();

}
void syscall35() {

	exit_hypervisor();

}
void syscall36() {

	exit_hypervisor();

}
void syscall37() {

	exit_hypervisor();

}
void syscall38() {

	exit_hypervisor();

}
void syscall39() {

	exit_hypervisor();

}
void syscall3A() {

	exit_hypervisor();

}
void syscall3B() {

	exit_hypervisor();

}
void syscall3C() {

	exit_hypervisor();

}
void syscall3D() {

	exit_hypervisor();

}
void syscall3E() {

	exit_hypervisor();

}
void syscall3F() {

	exit_hypervisor();

}

// Now we select the SYSCALL segment to hold the SYSCALL/trap entry point table.
#pragma data_seg(Syscall)

// The structure of each entry point is JMP <handler address> + NOP
// We have a char (xjmp) to hold the opcode for the JMP instruction,
// and then put the address of the SYSCALL/trap handler in the next
// two points as a pointer, and end with the NOP instruction opcode.
struct SysCall {
	char xjmp;	//Hold $4C, the JMP $nnnn opcode
	void()* syscall;//Holds handler address, will be the target of the JMP
	char xnop;	//Hold $EA, the NOP opcode
};

// To save writing 0x4C and 0xEA all the time, we define them as constants.
const char JMP = 0x4c;
const char NOP = 0xea;

// Now we can have a nice table of up to 64 SYSCALL handlers expressed
// in a fairly readable and easy format.
// Each line is an instance of the struct SysCall from above, with the JMP
// opcode value, the address of the handler routine and the NOP opcode value.
export struct SysCall[] SYSCALLS = {
	{ JMP, &syscall00, NOP },
	{ JMP, &syscall01, NOP },
	{ JMP, &syscall02, NOP },
	{ JMP, &syscall03, NOP },
	{ JMP, &syscall04, NOP },
	{ JMP, &syscall05, NOP },
	{ JMP, &syscall06, NOP },
	{ JMP, &syscall07, NOP },
	{ JMP, &syscall08, NOP },
	{ JMP, &syscall09, NOP },
	{ JMP, &syscall0A, NOP },
	{ JMP, &syscall0B, NOP },
	{ JMP, &syscall0C, NOP },
	{ JMP, &syscall0D, NOP },
	{ JMP, &syscall0E, NOP },
	{ JMP, &syscall0F, NOP },
	{ JMP, &syscall10, NOP },
	{ JMP, &securentr, NOP },
	{ JMP, &securexit, NOP },
	{ JMP, &syscall13, NOP },
	{ JMP, &syscall14, NOP },
	{ JMP, &syscall15, NOP },
	{ JMP, &syscall16, NOP },
	{ JMP, &syscall17, NOP },
	{ JMP, &syscall18, NOP },
	{ JMP, &syscall19, NOP },
	{ JMP, &syscall1A, NOP },
	{ JMP, &syscall1B, NOP },
	{ JMP, &syscall1C, NOP },
	{ JMP, &syscall1D, NOP },
	{ JMP, &syscall1E, NOP },
	{ JMP, &syscall1F, NOP },
	{ JMP, &syscall20, NOP },
	{ JMP, &syscall21, NOP },
	{ JMP, &syscall22, NOP },
	{ JMP, &syscall23, NOP },
	{ JMP, &syscall24, NOP },
	{ JMP, &syscall25, NOP },
	{ JMP, &syscall26, NOP },
	{ JMP, &syscall27, NOP },
	{ JMP, &syscall28, NOP },
	{ JMP, &syscall29, NOP },
	{ JMP, &syscall2A, NOP },
	{ JMP, &syscall2B, NOP },
	{ JMP, &syscall2C, NOP },
	{ JMP, &syscall2D, NOP },
	{ JMP, &syscall2E, NOP },
	{ JMP, &syscall2F, NOP },
	{ JMP, &syscall30, NOP },
	{ JMP, &syscall31, NOP },
	{ JMP, &syscall32, NOP },
	{ JMP, &syscall33, NOP },
	{ JMP, &syscall34, NOP },
	{ JMP, &syscall35, NOP },
	{ JMP, &syscall36, NOP },
	{ JMP, &syscall37, NOP },
	{ JMP, &syscall38, NOP },
	{ JMP, &syscall39, NOP },
	{ JMP, &syscall3A, NOP },
	{ JMP, &syscall3B, NOP },
	{ JMP, &syscall3C, NOP },
	{ JMP, &syscall3D, NOP },
	{ JMP, &syscall3E, NOP },
	{ JMP, &syscall3F, NOP }
};

// In this example we had only two SYSCALLs defined, so rather than having
// another 62 lines, we can just ask KickC to make the TRAP table begin
// at the next multiple of $100, i.e., at $8100.
export align(0x100) struct SysCall[] SYSCALL_TRAP = {
	{ JMP, &reset, NOP },
	{ JMP, &reset, NOP },
	{ JMP, &reset, NOP },
	{ JMP, &reset, NOP },
	{ JMP, &reset, NOP },
	{ JMP, &reset, NOP },
	{ JMP, &reset, NOP },
	{ JMP, &reset, NOP },
	{ JMP, &reset, NOP },
	{ JMP, &reset, NOP },
	{ JMP, &reset, NOP },
	{ JMP, &reset, NOP },
	{ JMP, &reset, NOP },
	{ JMP, &reset, NOP },
	{ JMP, &reset, NOP },
	{ JMP, &reset, NOP },
	{ JMP, &reset, NOP },
	{ JMP, &reset, NOP },
	{ JMP, &reset, NOP },
	{ JMP, &reset, NOP },
	{ JMP, &reset, NOP },
	{ JMP, &reset, NOP },
	{ JMP, &reset, NOP },
	{ JMP, &reset, NOP },
	{ JMP, &reset, NOP },
	{ JMP, &reset, NOP },
	{ JMP, &reset, NOP },
	{ JMP, &reset, NOP },
	{ JMP, &reset, NOP },
	{ JMP, &reset, NOP },
	{ JMP, &reset, NOP },
	{ JMP, &reset, NOP },
	{ JMP, &reset, NOP },
	{ JMP, &reset, NOP },
	{ JMP, &reset, NOP },
	{ JMP, &reset, NOP },
	{ JMP, &reset, NOP },
	{ JMP, &reset, NOP },
	{ JMP, &reset, NOP },
	{ JMP, &reset, NOP },
	{ JMP, &reset, NOP },
	{ JMP, &reset, NOP },
	{ JMP, &reset, NOP },
	{ JMP, &reset, NOP },
	{ JMP, &reset, NOP },
	{ JMP, &reset, NOP },
	{ JMP, &reset, NOP },
	{ JMP, &reset, NOP },	
	{ JMP, &reset, NOP },
	{ JMP, &reset, NOP },
	{ JMP, &reset, NOP },
	{ JMP, &reset, NOP },
	{ JMP, &reset, NOP },
	{ JMP, &reset, NOP },
	{ JMP, &reset, NOP },
	{ JMP, &reset, NOP },
	{ JMP, &reset, NOP },
	{ JMP, &reset, NOP },
	{ JMP, &reset, NOP },
	{ JMP, &reset, NOP },
	{ JMP, &reset, NOP },
	{ JMP, &reset, NOP }
};
